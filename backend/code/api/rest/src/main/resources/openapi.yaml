openapi: 3.0.0
info:
  version: '1.0'
  title: Dunktomic
  description: 'Allows you to consult games, clubs, courts, players information'
servers:
  - url: 'http://localhost:8085'
    description: ''
paths:
  /auth:
    post:
      tags:
        - Auth
      summary: Authentication
      description: Retrieves a new application access token
      operationId: getAuthToken
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                grant_type:
                  type: string
                  example: password
                email:
                  type: string
                  format: email
                  example: test@example.com
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  /auth/token:
    post:
      tags:
        - Auth
      summary: Refresh access token
      description: Get new access token from a refresh token
      operationId: exchangeToken
      requestBody:
        $ref: '#/components/requestBodies/TokenExangeForm'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      servers:
        - url: 'http://localhost:8085'
          description: ''
  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout
      description: 'Logs out, removes token access'
      operationId: postAuthLogout
      responses:
        '200':
          description: OK
        '401':
          $ref: '#/components/responses/Unauthorized'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  /clubs:
    get:
      tags:
        - Clubs
      summary: Find clubs using filters
      description: Get clubs paginated based on the query parameters filter
      operationId: getClubs
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
        - name: name
          in: query
          description: Club name
          schema:
            type: string
        - name: district
          in: query
          description: District
          schema:
            type: string
        - name: postal_code
          in: query
          description: Postal Code
          schema:
            type: string
        - name: street_address
          in: query
          description: Street Address
          schema:
            type: string
        - name: page
          in: query
          description: Page
          schema:
            type: integer
        - name: size
          in: query
          description: Page size
          schema:
            type: integer
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClubsPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  '/clubs/{id}':
    get:
      tags:
        - Clubs
      summary: Find a club by id
      description: Finds a club by its id.
      operationId: getClub
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
        - name: id
          in: path
          description: The club identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The club
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Club'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
  '/clubs/{id}/courts':
    get:
      tags:
        - Clubs
      summary: Find club courts
      description: Find a club courts by the club's id.
      operationId: getClubCourts
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
        - name: page
          in: query
          description: Page
          schema:
            type: integer
        - name: id
          in: path
          description: The club identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Get paginated club's courts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourtsPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  '/clubs/{id}/courts/slots':
    get:
      tags:
        - Clubs
        - Courts
      summary: Retrieve club courts availability
      description: It is also possible to filter club courts via query parameters
      operationId: getCourtSlots
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
        - name: type
          in: query
          description: Court type
          allowEmptyValue: true
          schema:
            type: string
            example: 'indoor, outdoor, 3x3'
        - name: weekday
          in: query
          description: Weekday
          schema:
            type: string
            example: monday
        - name: id
          in: path
          description: The club identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Court slots page
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourtSlotsPage'
              examples:
                Example:
                  value:
                    data:
                      - name: Pista 1
                        type: indoor
                        weekday: monday
                        start_time: '09:00:00'
                        end_time: '09:50:00'
                        state: available
                    meta:
                      number: 0
                      last: 0
                      size: 0
                      total: 0
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  /players:
    get:
      tags:
        - Players
      summary: Find players using filters
      description: Get players paginated based on the query parameters filter
      operationId: getPlayers
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
        - name: name
          in: query
          description: Player name
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayersPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
    post:
      tags:
        - Players
      summary: Create player
      description: Creates a player
      operationId: postPlayer
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
      requestBody:
        $ref: '#/components/requestBodies/CreatePlayerRequest'
      responses:
        '201':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  '/players/{id}':
    get:
      tags:
        - Players
      summary: Find player by id
      description: Retrieves a player by it's id
      operationId: getPlayer
      parameters:
        - name: id
          in: path
          description: The player identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: The player
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
    delete:
      tags:
        - Players
      summary: Delete player account
      description: Deletes a player account
      operationId: deletePlayer
      parameters:
        - name: id
          in: path
          description: The player identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/Accepted'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  '/players/{id}/followers':
    get:
      tags:
        - Players
      summary: Find player followers
      description: Retrieves player followers by its id
      operationId: getPlayerFollowers
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
        - name: id
          in: path
          description: The player identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlayersPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  /games:
    post:
      tags:
        - Games
      summary: Create a game
      description: Creates a new game
      operationId: postGame
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
      requestBody:
        $ref: '#/components/requestBodies/CreateGameRequest'
      responses:
        '201':
          $ref: '#/components/responses/Accepted'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
    get:
      tags:
        - Games
      summary: Find games using filters
      description: Retrieve games using filter
      operationId: getGames
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
        - name: start_time
          in: query
          description: Game start time
          schema:
            type: string
            format: regex
            pattern: '^[0-1][0-9]:[0-5][0-9]:[0-5][0-9]$|^2[0-3]:[0-5][0-9]:[0-5][0-9]$'
            example: '09:00:00'
        - name: type
          in: query
          description: Game type
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GamesPage'
        '400':
          $ref: '#/components/responses/BadRequest'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  '/games/{id}':
    get:
      tags:
        - Games
      summary: Find a game by id
      description: Retrieves a game by it's id
      operationId: getGame
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
        - name: id
          in: path
          description: Game identifier
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  '/games/{id}/join':
    post:
      tags:
        - Games
      summary: Join a Game
      description: Joins a game
      operationId: postJoinTeamGame
      parameters:
        - name: id
          in: path
          description: Game identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/JoinGameRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
  '/games/{id}/leave':
    post:
      tags:
        - Games
      summary: Leave a Game
      description: Leaves a game
      operationId: postLeaveGame
      parameters:
        - $ref: '#/components/parameters/acceptLanguage'
        - name: id
          in: path
          description: Game identifier
          required: true
          schema:
            type: string
      requestBody:
        $ref: '#/components/requestBodies/LeaveGameRequest'
      responses:
        '200':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/UnexpectedError'
      security: []
      servers:
        - url: 'http://localhost:8085'
          description: ''
tags:
  - name: Auth
    description: User authentication related use cases
  - name: Clubs
    description: Clubs related use cases
  - name: Courts
    description: Club courts related use cases
  - name: Games
    description: Games related use cases
  - name: Players
    description: Player related use cases
components:
  parameters:
    acceptLanguage:
      name: acceptLanguage
      in: header
      description: Accept-Language
      required: false
      schema:
        type: string
        example: es_ES
  requestBodies:
    CreatePlayerRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
              email:
                type: string
                format: email
              password:
                type: string
                format: password
              positions_on_court:
                type: array
                description: Player positions
                items:
                  type: string
                  enum:
                    - PG
                    - SG
                    - SF
                    - PF
                    - C
                example:
                  - PG
                  - SG
            required:
              - email
              - password
    TokenExangeForm:
      content:
        application/json:
          schema:
            type: object
            properties:
              grant_type:
                type: string
                default: refresh_token
              refresh_token:
                type: string
            required:
              - refresh_token
    CreateGameRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              clud_ib:
                type: string
                format: uuid
              start_time:
                type: string
                format: regex
                pattern: '^[0-1][0-9]:[0-5][0-9]:[0-5][0-9]$|^2[0-3]:[0-5][0-9]:[0-5][0-9]$'
                example: '09:00:00'
              court:
                $ref: '#/components/schemas/Court'
              type:
                type: string
                enum:
                  - public
                  - private
            required:
              - clud_ib
              - start_time
              - court
              - type
    JoinGameRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              player_id:
                type: string
                format: uuid
              team:
                oneOf:
                  - type: string
                    enum:
                      - team_a
                      - team_b
    LeaveGameRequest:
      content:
        application/json:
          schema:
            type: object
            properties:
              player_id:
                type: string
                format: uuid
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Accepted:
      description: Accepted
      headers:
        x-resource-id:
          schema:
            type: string
            format: uuid
          description: Resource identifier
    Conflict:
      description: Conflict
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: Unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Token:
      type: object
      title: Token
      properties:
        access_token:
          type: string
          description: The access token issued
        token_type:
          type: string
          description: The type of the token issued
          example: Bearer
        expires_in:
          type: integer
          description: The lifetime in seconds of the access token
          format: int64
          minimum: 0
          example: 60
        refresh_token:
          type: string
          description: 'The refresh token, which can be used to obtain new access tokens using the same authorization grant.'
        refresh_expires_in:
          type: integer
          description: The lifetime in seconds of the access token.
          format: int64
          minimum: 0
        scope:
          type: string
          description: The scope of the access token.
    ClubsPage:
      title: ClubsPage
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Club'
        - $ref: '#/components/schemas/Page'
    Club:
      type: object
      title: Club
      properties:
        id:
          type: string
          description: Identifier
          format: uuid
        name:
          type: string
          description: Name
          example: Centro Deportivo Municipal Luis Aragonés
        district:
          type: string
          description: District
          example: Distrito Hortaleza
        postal_code:
          type: string
          description: Postal code
          example: '28033'
        street_address:
          type: string
          description: Street address
          example: 'Carretera Estación de Hortaleza, 11, 28033, Madrid'
        latitude:
          type: number
          description: Latitude
          format: float
          example: 40.4646
        longitude:
          type: number
          description: Longitude
          format: float
          example: -3.62759
        image:
          $ref: '#/components/schemas/Image'
    Image:
      type: object
      title: Image
      properties:
        path:
          type: string
          description: Path to the image
          maxLength: 256
        mime_type:
          type: string
          enum:
            - image/jpeg
            - image/jpg
            - image/png
          description: MIME type of the image
      required:
        - path
        - mime_type
    Page:
      type: object
      title: Page
      properties:
        meta:
          $ref: '#/components/schemas/PageMetadata'
    PageMetadata:
      type: object
      title: PageMetadata
      properties:
        number:
          type: integer
          description: The current page number (starting at 0)
        last:
          type: integer
          description: The last page that can be requested
        size:
          type: integer
          description: The number of results returned per page
        total:
          type: integer
          description: The total amount of elements on all pages
      required:
        - number
        - last
        - size
        - total
    CourtsPage:
      title: CourtsPage
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Court'
        - $ref: '#/components/schemas/Page'
    Court:
      type: object
      title: Court
      properties:
        name:
          type: string
          description: Court name
          example: Pista 1
        type:
          type: string
          enum:
            - indoor
            - outdoor
            - 3x3
          description: Court type
          example: indoor
    CourtSlotsPage:
      title: CourtSlotsPage
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/CourtSlot'
        - $ref: '#/components/schemas/Page'
    CourtSlot:
      title: CourtSlot
      allOf:
        - $ref: '#/components/schemas/Court'
        - $ref: '#/components/schemas/Slot'
        - $ref: '#/components/schemas/CourtState'
    Slot:
      type: object
      title: Slot
      properties:
        weekday:
          type: string
          enum:
            - monday
            - tuesday
            - wednesday
            - thursday
            - friday
            - saturday
            - sunday
        start_time:
          type: string
          format: regex
          pattern: '^[0-1][0-9]:[0-5][0-9]:[0-5][0-9]$|^2[0-3]:[0-5][0-9]:[0-5][0-9]$'
          example: '09:00:00'
        end_time:
          type: string
          format: regex
          pattern: '^[0-1][0-9]:[0-5][0-9]:[0-5][0-9]$|^2[0-3]:[0-5][0-9]:[0-5][0-9]$'
          example: '09:50:00'
    CourtState:
      type: object
      title: CourtState
      properties:
        state:
          type: string
          enum:
            - available
            - booked
    PlayersPage:
      title: PlayersPage
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Player'
        - $ref: '#/components/schemas/Page'
    Player:
      title: Player
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            positions_on_court:
              type: array
              description: Player positions
              items:
                type: string
                enum:
                  - PG
                  - SG
                  - SF
                  - PF
                  - C
              example:
                - PG
                - SG
            level:
              type: number
              description: Player level
              format: float
              minimum: 0
              maximum: 10
              example: 1
    User:
      type: object
      title: User
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        image:
          $ref: '#/components/schemas/Image'
    GamesPage:
      title: GamesPage
      allOf:
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Game'
        - $ref: '#/components/schemas/Page'
    Game:
      type: object
      title: Game
      properties:
        id:
          type: string
          description: Game identifier
          format: uuid
        club_id:
          type: string
          description: Club identifier
          format: uuid
        start_time:
          type: string
          format: regex
          pattern: '^[0-1][0-9]:[0-5][0-9]:[0-5][0-9]$|^2[0-3]:[0-5][0-9]:[0-5][0-9]$'
          example: '09:00:00'
        state:
          type: string
          enum:
            - pending
            - cancelled
            - in_progress
            - finished
          description: Game state
        court:
          $ref: '#/components/schemas/Court'
        team_a:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/Player'
        team_b:
          type: array
          maxItems: 5
          items:
            $ref: '#/components/schemas/Player'
        result:
          type: string
          enum:
            - win_a
            - win_b
            - draw
          description: Game result
        type:
          type: string
          enum:
            - public
            - private
    qwfv18qbesdo4:
      type: string
      enum:
        - PG
        - SG
        - SF
        - PF
        - C
    Error:
      type: object
      title: Error
      description: A Problem Details Object
      properties:
        code:
          type: string
          description: Error code.
        description:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
        fields:
          type: array
          items:
            $ref: '#/components/schemas/FieldErrors'
    FieldErrors:
      type: object
      title: FieldErrors
      description: The field error with all its errors
      properties:
        name:
          type: string
          description: Field causing the error.
        errors:
          type: array
          items:
            $ref: '#/components/schemas/FieldError'
    FieldError:
      type: object
      title: FieldError
      description: A single error
      properties:
        code:
          type: string
          description: Error type
        description:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem.
